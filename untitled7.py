# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15_WR_zHjuUxXPcGaq0GKWeZsx4G-sBHu
"""

def forward(w1,xL,b):
  ya=xL*w1+b
  return ya
def error2(y1,ya):
  error=(y1-ya)*(y1-ya)
  return error

def div_w1(y1,w1,xL):
  div_error = 2*(y1-w1*xL-b)*(-xL)
  return div_error

def div_w2(y1,w1,xL):
  div_error = 2*(y1-w1*xL-b)*(-1)
  return div_error

x=[1.0,2.0,3.0]
y=[5.0,7.0,9.0]
b=1
w1=4
a=0.01
for epho in range(10):
  for x_val,y_val in zip(x,y):
    ya = forward(w1,x_val,b)
    div_error_1 = div_w1(y_val,w1,x_val)
    div_error_2 = div_w2(y_val,w1,x_val)
    w1=w1-a*div_error_1
    b=b-a*div_error_2
    loss=error2(y_val,ya)
    
    print("loss = ",loss,ya)
    print("w1 is " , w1)
    print("b is " , b)
    print("predict 4 " , w1*4+b,"\n")
    break
  break

# Training Data
x_data = [1.0, 2.0, 3.0]
y_data = [2.0, 4.0, 6.0]

w = 1.0  # a random guess: random value


# our model forward pass
def forward(x):
    return x * w


# Loss function
def loss(x, y):
    y_pred = forward(x)
    return (y_pred - y) * (y_pred - y)


# compute gradient
def gradient(x, y):  # d_loss/d_w
    return 2 * x * (x * w - y)


# Before training
print("Prediction (before training)",  4, forward(4))

# Training loop
for epoch in range(10):
    for x_val, y_val in zip(x_data, y_data):
        # Compute derivative w.r.t to the learned weights
        # Update the weights
        # Compute the loss and print progress
        grad = gradient(x_val, y_val)
        w = w - 0.01 * grad
        print("\tgrad: ", x_val, y_val, round(grad, 2))
        l = loss(x_val, y_val)
    print("progress:", epoch, "w=", round(w, 2), "loss=", round(l, 2))

# After training
print("Predicted score (after training)",  "4 hours of studying: ", forward(4))

x=[1,2,3]
y=[2,4,6]
w=7
a=0.01
for epho in range(100):
  for x_val,y_val in zip(x,y):
    print(type(x_val))